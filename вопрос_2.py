# -*- coding: utf-8 -*-
"""–í–æ–ø—Ä–æ—Å_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UBcqLwLvmX1KMtK_bD_eYLt9P7fkvmuv

# üìã –ü–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞

## üéØ –¶–µ–ª–∏
1. –°–æ–∑–¥–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
2. –û–±–µ—Å–ø–µ—á–∏—Ç—å  —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –û–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã –≤ compile-time

## üìù –ü–ª–∞–Ω

### üîπ 1. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å `Shape`
- –°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–µ—Ç–æ–¥–æ–≤: `area()`, `is_valid()`
- –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä

### üîπ 2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤)
- –ö–ª–∞—Å—Å `Circle` —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞
- –ö–ª–∞—Å—Å `Triangle` —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–ª–æ—â–∞–¥–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–µ—Ä–æ–Ω–∞  –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∏–≥—É—Ä

### üîπ 3. –§—É–Ω–∫—Ü–∏—è calculate_area()
- –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞: —Å–ø–∏—Å–æ–∫ –∏ —Å–ª–æ–≤–∞—Ä—å
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

### üîπ 4. –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ `Circle`
- –¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ `Triangle`
- –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ `calculate_area()`
- –¢–µ—Å—Ç—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- –¢–µ—Å—Ç—ã –Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏

## üì¶ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
1. –ú–æ–¥—É–ª—å geometry_lib.py
2. –ù–∞–±–æ—Ä —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
3. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

## üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PEP8
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã
- –†–∞–±–æ—Ç–∞ –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

'''
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

geometry_lib/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ shapes/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ base.py
‚îÇ   ‚îú‚îÄ‚îÄ circle.py
‚îÇ   ‚îî‚îÄ‚îÄ triangle.py
‚îî‚îÄ‚îÄ tests/
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ test_circle.py
    ‚îî‚îÄ‚îÄ test_triangle.py
'''

"""
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
"""

import math
from abc import ABC, abstractmethod
from typing import Union, Dict, List, Any
import unittest

class Shape(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä"""

    @abstractmethod
    def area(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã"""
        pass

    @abstractmethod
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–æ–π"""
        pass

class Circle(Shape):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—Ä—É–≥–∞"""

    def __init__(self, radius: float):
        if radius <= 0:
            raise ValueError("–†–∞–¥–∏—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        self.radius = radius

    def area(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞"""
        return math.pi * self.radius ** 2

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—Ä—É–≥–∞"""
        return self.radius > 0

    def __str__(self):
        return f"Circle(radius={self.radius})"

class Triangle(Shape):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""

    def __init__(self, side_a: float, side_b: float, side_c: float):
        self.sides = [side_a, side_b, side_c]

        if any(side <= 0 for side in self.sides):
            raise ValueError("–í—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")

        if not self._is_triangle_valid():
            raise ValueError("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ç–∞–∫–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def area(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–µ—Ä–æ–Ω–∞"""
        a, b, c = self.sides
        s = (a + b + c) / 2
        return math.sqrt(s * (s - a) * (s - b) * (s - c))

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        return self._is_triangle_valid()

    def is_right_triangle(self, tolerance: float = 1e-10) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º
        """
        a, b, c = sorted(self.sides)
        return abs(a**2 + b**2 - c**2) < tolerance

    def _is_triangle_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        a, b, c = self.sides
        return (a + b > c) and (a + c > b) and (b + c > a)

    def __str__(self):
        return f"Triangle(sides={self.sides})"

def calculate_area(shape_data: Union[Dict[str, Any], List[float]]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Ç–∏–ø–∞ –≤ compile-time
    """
    if isinstance(shape_data, dict):
        return _create_shape_from_dict(shape_data).area()
    elif isinstance(shape_data, list):
        return _create_shape_from_list(shape_data).area()
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä—ã")

def _create_shape_from_dict(data: Dict[str, Any]) -> Shape:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    shape_type = data.get('type')
    params = data.get('params', {})

    if shape_type == 'circle':
        return Circle(**params)
    elif shape_type == 'triangle':
        return Triangle(**params)
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã: {shape_type}")

def _create_shape_from_list(params: List[float]) -> Shape:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if len(params) == 1:
        return Circle(params[0])
    elif len(params) == 3:
        return Triangle(*params)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∏–≥—É—Ä")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print("üî∑  –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–• –§–ò–ì–£–† ")
print("=" * 50)

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–≥–∞
print("\nüéØ –ö–†–£–ì:")
circle = Circle(5)
print(f"   –†–∞–¥–∏—É—Å: 5")
print(f"   –ü–ª–æ—â–∞–¥—å: {circle.area():.2f}")
print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {circle.is_valid()}")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
print("\nüî∫ –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö:")
triangle = Triangle(3, 4, 5)
print(f"   –°—Ç–æ—Ä–æ–Ω—ã: 3, 4, 5")
print(f"   –ü–ª–æ—â–∞–¥—å: {triangle.area():.2f}")
print(f"   –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π: {triangle.is_right_triangle()}")
print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {triangle.is_valid()}")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è calculate_area
print("\nüé≠ –í–´–ß–ò–°–õ–ï–ù–ò–ï –ë–ï–ó –ó–ù–ê–ù–ò–Ø –¢–ò–ü–ê:")
area1 = calculate_area([2])  # –ö—Ä—É–≥
area2 = calculate_area([3, 4, 5])  # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
area3 = calculate_area({'type': 'circle', 'params': {'radius': 3}})
area4 = calculate_area({'type': 'triangle', 'params': {'side_a': 6, 'side_b': 8, 'side_c': 10}})

print(f"   calculate_area([2]) = {area1:.2f} (–∫—Ä—É–≥)")
print(f"   calculate_area([3,4,5]) = {area2:.2f} (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)")
print(f"   calculate_area(circle —Ä–∞–¥–∏—É—Å=3) = {area3:.2f}")
print(f"   calculate_area(triangle 6-8-10) = {area4:.2f}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
print("\nüìê –ü–†–û–í–ï–†–ö–ê –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–´–• –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö–û–í:")
test_cases = [
    (3, 4, 5, True),
    (5, 12, 13, True),
    (6, 8, 10, True),
    (2, 3, 4, False),
    (5, 5, 5, False),
    (7, 24, 25, True)
]

for a, b, c, expected in test_cases:
    try:
        tri = Triangle(a, b, c)
        is_right = tri.is_right_triangle()
        status = "‚úì" if is_right == expected else "‚úó"
        print(f"   {status} {a}-{b}-{c}: {is_right} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
    except ValueError as e:
        print(f"   ‚úó {a}-{b}-{c}: –û—à–∏–±–∫–∞ - {e}")

# –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
print("\n" + "=" * 50)
print("üß™ –ó–ê–ü–£–°–ö –Æ–ù–ò–¢-–¢–ï–°–¢–û–í")
print("=" * 50)

class TestGeometryLibrary(unittest.TestCase):

    def test_circle(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–∞"""
        self.assertAlmostEqual(Circle(1).area(), math.pi)
        self.assertAlmostEqual(Circle(2).area(), 4 * math.pi)
        with self.assertRaises(ValueError):
            Circle(0)
        with self.assertRaises(ValueError):
            Circle(-1)

    def test_triangle(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        self.assertAlmostEqual(Triangle(3, 4, 5).area(), 6.0)
        self.assertTrue(Triangle(3, 4, 5).is_right_triangle())
        self.assertFalse(Triangle(2, 3, 4).is_right_triangle())

        with self.assertRaises(ValueError):
            Triangle(1, 2, 10)
        with self.assertRaises(ValueError):
            Triangle(0, 1, 2)

    def test_calculate_area(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ calculate_area"""
        self.assertAlmostEqual(calculate_area([2]), 4 * math.pi)
        self.assertAlmostEqual(calculate_area([3, 4, 5]), 6.0)
        self.assertAlmostEqual(calculate_area({'type': 'circle', 'params': {'radius': 3}}), 9 * math.pi)

        with self.assertRaises(ValueError):
            calculate_area("invalid")
        with self.assertRaises(ValueError):
            calculate_area([1, 2])

    def test_right_triangle_cases(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∏—Ñ–∞–≥–æ—Ä–æ–≤—ã —Ç—Ä–æ–π–∫–∏
        self.assertTrue(Triangle(3, 4, 5).is_right_triangle())
        self.assertTrue(Triangle(5, 12, 13).is_right_triangle())
        self.assertTrue(Triangle(7, 24, 25).is_right_triangle())
        self.assertTrue(Triangle(8, 15, 17).is_right_triangle())

        # –ù–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ
        self.assertFalse(Triangle(2, 3, 4).is_right_triangle())
        self.assertFalse(Triangle(5, 5, 5).is_right_triangle())
        self.assertFalse(Triangle(4, 5, 6).is_right_triangle())

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test_suite = unittest.TestLoader().loadTestsFromTestCase(TestGeometryLibrary)
test_runner = unittest.TextTestRunner(verbosity=2)
test_result = test_runner.run(test_suite)

print("\n" + "=" * 50)
print("üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –§–ò–ì–£–†–´ (–ü–†–ò–ú–ï–†)")
print("=" * 50)

# –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
class Rectangle(Shape):
    """–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""

    def __init__(self, width: float, height: float):
        if width <= 0 or height <= 0:
            raise ValueError("–®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        self.width = width
        self.height = height

    def area(self) -> float:
        return self.width * self.height

    def is_valid(self) -> bool:
        return self.width > 0 and self.height > 0

    def __str__(self):
        return f"Rectangle({self.width}x{self.height})"

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
print("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å Rectangle:")
rect = Rectangle(4, 5)
print(f"   –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 4x5: –ø–ª–æ—â–∞–¥—å = {rect.area()}")
print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {rect.is_valid()}")

print("\n" + "=" * 50)
print("‚úÖ –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
print("=" * 50)
print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: Circle, Triangle")
print("–§—É–Ω–∫—Ü–∏—è: calculate_area()")
print("–ú–µ—Ç–æ–¥—ã: area(), is_valid(), is_right_triangle() (–¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)")

"""# Geometry Library

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä.

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install geometry-lib
"""